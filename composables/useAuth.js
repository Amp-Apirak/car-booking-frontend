/**
 * Authentication composable ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ login/logout ‡∏Å‡∏±‡∏ö Backend API
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö JWT token, refresh token, ‡πÅ‡∏•‡∏∞ user profile management
 */
export const useAuth = () => {
  const config = useRuntimeConfig()
  const API_BASE_URL = config.public.apiBase || 'http://localhost:4000/api'
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á reactive state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö token
  const token = ref(null)
  const user = ref(null)
  
  // ‡∏î‡∏∂‡∏á token ‡πÅ‡∏•‡∏∞ user ‡∏à‡∏≤‡∏Å cookies ‡πÄ‡∏°‡∏∑‡πà‡∏≠ initialize
  const initAuth = () => {
    const authToken = useCookie('auth-token')
    const userData = useCookie('user-data')
    
    if (authToken.value) {
      token.value = authToken.value
    }
    
    if (userData.value) {
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠ object
        if (typeof userData.value === 'string') {
          user.value = JSON.parse(userData.value)
        } else {
          user.value = userData.value
        }
      } catch (error) {
        console.error('Error parsing user data:', error)
        user.value = null
      }
    }
  }
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å initAuth ‡πÄ‡∏°‡∏∑‡πà‡∏≠ composable ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
  initAuth()

  /**
   * ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ username ‡πÅ‡∏•‡∏∞ password
   * @param {Object} credentials - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
   * @param {string} credentials.username - ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   * @param {string} credentials.password - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
   * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
   */
  const login = async (credentials) => {
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API login
      const response = await $fetch(`${API_BASE_URL}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          username: credentials.username,
          password: credentials.password
        })
      })

      if (response.accessToken) {
        // ‡πÄ‡∏Å‡πá‡∏ö tokens ‡πÉ‡∏ô cookies
        const authToken = useCookie('auth-token', { 
          maxAge: 60 * 60 * 24 * 7, // 7 ‡∏ß‡∏±‡∏ô
          secure: false,
          httpOnly: false,
          sameSite: 'lax'
        })
        
        const refreshToken = useCookie('refresh-token', { 
          maxAge: 60 * 60 * 24 * 7, // 7 ‡∏ß‡∏±‡∏ô
          secure: false,
          httpOnly: false,
          sameSite: 'lax'
        })

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å tokens
        authToken.value = response.accessToken
        refreshToken.value = response.refreshToken
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï reactive state
        token.value = response.accessToken

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const userProfile = await getUserProfile(response.accessToken)
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const userData = useCookie('user-data', { 
          maxAge: 60 * 60 * 24 * 7,
          secure: false,
          httpOnly: false,
          sameSite: 'lax'
        })
        
        userData.value = JSON.stringify(userProfile)
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï reactive state
        user.value = userProfile

        return {
          success: true,
          user: userProfile,
          tokens: {
            accessToken: response.accessToken,
            refreshToken: response.refreshToken
          }
        }
      }

      throw new Error('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö access token')
    } catch (error) {
      console.error('Login error:', error)
      
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      if (error.response?.status === 401) {
        throw new Error('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
      } else if (error.response?.status === 429) {
        throw new Error('‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà')
      } else if (error.response?.status >= 500) {
        throw new Error('‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
      } else {
        throw new Error(error.data?.message || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö')
      }
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å API
   * @param {string} authToken - JWT token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ authentication
   * @returns {Promise<Object>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   */
  const getUserProfile = async (authToken) => {
    try {
      const response = await $fetch(`${API_BASE_URL}/users/profile`, {
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        }
      })

      console.log('üîç Raw response from /users/profile:', response)

      // Backend ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô { success: true, data: user }
      const userResponse = response.data || response
      console.log('üîç User response data:', userResponse)

      // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
      const userData = {
        user_id: userResponse.user_id,
        username: userResponse.username,
        email: userResponse.email,
        first_name: userResponse.first_name,
        last_name: userResponse.last_name,
        name: `${userResponse.first_name || ''} ${userResponse.last_name || ''}`.trim() || userResponse.username,
        role: userResponse.role || 'user',
        organization_id: userResponse.organization_id,
        organization_name: userResponse.organization_name,
        permissions: userResponse.permissions || [],
        roles: userResponse.roles || [],
        avatar: userResponse.avatar || userResponse.avatar_path,
        phone: userResponse.phone,
        status: userResponse.status,
        gender: userResponse.gender,
        citizen_id: userResponse.citizen_id,
        address: userResponse.address,
        country: userResponse.country,
        province: userResponse.province,
        postal_code: userResponse.postal_code
      }
      
      console.log('üîç Processed userData:', userData)
      return userData
    } catch (error) {
      console.error('Error fetching user profile:', error)
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      return {
        user_id: 'unknown',
        username: 'unknown',
        name: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        role: 'user',
        permissions: [],
        roles: []
      }
    }
  }

  /**
   * ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• authentication ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   * @returns {Promise<void>}
   */
  const logout = async () => {
    try {
      const authToken = useCookie('auth-token')
      const refreshToken = useCookie('refresh-token')

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API logout ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token
      if (authToken.value && refreshToken.value) {
        await $fetch(`${API_BASE_URL}/auth/logout`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${authToken.value}`,
            'Content-Type': 'application/json'
          },
          body: {
            refreshToken: refreshToken.value
          }
        })
      }
    } catch (error) {
      console.error('Logout API error:', error)
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ
    } finally {
      // ‡∏•‡∏ö cookies ‡πÅ‡∏•‡∏∞ reactive state ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ
      const authToken = useCookie('auth-token')
      const refreshToken = useCookie('refresh-token')
      const userData = useCookie('user-data')
      
      authToken.value = null
      refreshToken.value = null
      userData.value = null
      
      // ‡∏•‡πâ‡∏≤‡∏á reactive state
      token.value = null
      user.value = null
    }
  }

  // Refresh token
  const refreshAuthToken = async () => {
    try {
      const refreshToken = useCookie('refresh-token')
      
      if (!refreshToken.value) {
        throw new Error('No refresh token available')
      }

      const response = await $fetch(`${API_BASE_URL}/auth/token/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: {
          refreshToken: refreshToken.value
        }
      })

      if (response.accessToken) {
        const authToken = useCookie('auth-token', { 
          maxAge: 60 * 60 * 24 * 7,
          secure: false,
          httpOnly: false,
          sameSite: 'lax'
        })
        
        authToken.value = response.accessToken
        
        if (response.refreshToken) {
          const newRefreshToken = useCookie('refresh-token', { 
            maxAge: 60 * 60 * 24 * 7,
            secure: false,
            httpOnly: false,
            sameSite: 'lax'
          })
          newRefreshToken.value = response.refreshToken
        }

        return response.accessToken
      }

      throw new Error('Failed to refresh token')
    } catch (error) {
      console.error('Token refresh error:', error)
      
      // ‡∏ñ‡πâ‡∏≤ refresh ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ logout
      await logout()
      await navigateTo('/login')
      
      throw error
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ authenticate ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @returns {boolean} true ‡∏ñ‡πâ‡∏≤ authenticated, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà
   */
  const isAuthenticated = () => {
    const authToken = useCookie('auth-token')
    const userData = useCookie('user-data')
    
    return !!(authToken.value && userData.value)
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å cookies
   * @returns {Object|null} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
   */
  const getCurrentUser = () => {
    const userData = useCookie('user-data')
    
    if (userData.value) {
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠ object
        if (typeof userData.value === 'string') {
          return JSON.parse(userData.value)
        } else {
          return userData.value
        }
      } catch (error) {
        console.error('Error parsing user data:', error)
        return null
      }
    }
    
    return null
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param {string} permission - ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
   */
  const hasPermission = (permission) => {
    const currentUser = getCurrentUser()
    
    if (!currentUser || !currentUser.permissions) {
      return false
    }
    
    return currentUser.permissions.includes(permission)
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param {string} role - ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
   */
  const hasRole = (role) => {
    const currentUser = getCurrentUser()
    
    if (!currentUser) {
      return false
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å role field ‡∏´‡∏£‡∏∑‡∏≠ roles array
    if (currentUser.role === role) {
      return true
    }
    
    if (currentUser.roles && Array.isArray(currentUser.roles)) {
      return currentUser.roles.some(userRole => userRole.name === role)
    }
    
    return false
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà
   */
  const isAdmin = () => {
    return hasRole('admin')
  }

  // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô functions ‡πÅ‡∏•‡∏∞ reactive states ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  return {
    // Reactive states
    token: readonly(token),
    user: readonly(user),
    
    // Authentication methods
    login,
    logout,
    refreshAuthToken,
    getUserProfile,
    
    // Status checks
    isAuthenticated,
    getCurrentUser,
    
    // Permission & Role checks
    hasPermission,
    hasRole,
    isAdmin
  }
}